struct statementlist{
nodeType *ptr;
struct statementlist * next;
}

struct statementlist *head,*root;

head = (struct statementlist *)malloc(sizeof(struct statementlist));
root = head;

void insert(nodeType *potr)
{
	struct statementlist * temp;
	temp = struct statementlist *)malloc(sizeof(struct statementlist));
	root->next = temp;
	temp->next = NULL;
	temp->ptr=potr;
	next = temp;
}

void runner(struct statementlist * st)
{
	while(st->next!=NULL)
	{
        if(typ==1)
        {
            puts("declaration statement");
        }
        else if(typ == 2)
        {
            puts("assignment statement");
        }
        else
        {
            puts("print statement");
        }
            
			ex(st->ptr,1);
            //freeNode(st->ptr);
	}
}


//////////////////

struct vlist * crhead(nodeType *ptr)
{
    struct vlist * ans;
    ans = (struct vlist *)malloc(struct vlist);
    ans->val=ptr;
    ans->next= NULL;
}

struct vlist * conn(struct vlist * root,nodeType * ptr)
{
    struct vlist * ans;
    ans = (struct vlist *)malloc(struct vlist);
    ans->val=ptr;
    ans->next= NULL;
    struct vlist * temp = root;
    while(tem->next!=NULL)
    {
    temp=temp->next;
    }
    temp->next=ans;
    return root;
}

struct nodeType * vlitonpt(struct vlist * root,int type)
{
    struct nodeType * ans;
    ans = (struct nodeType *)malloc(struct nodeType);
    if(type==1)
    {
        ans->type=decl;
        ans->vl=root;
    }
    else
    {
        ans->type=prin;
        ans->vl=root;
    }
    return ans;
}

int count=0;
int poss;

    struct dataType {
        char * id_name;
        char * data_type;
        int value;
        int def;
    } symbolTable[40];

    int search(char *type) {
	int i;
	for(i=count-1; i>=0; i--) {
		if(strcmp(symbolTable[i].id_name, type)==0) {
            poss=i;
			return -1;
			break;
		}
	}
	return 0;
}

void add(char * name)
{
    int x = search(name);
    if(x==0){
    if(count<40)
    {
            symbolTable[count].id_name=strdup(name);
			symbolTable[count].data_type=strdup("int");
            symbolTable[count].value=-1;
            symbolTable[count].def=-1;
            count++;
    }
    else{
        puts("memory space overflowed because of variable");
    }
    }
    else
    {
        puts("error : variable already declared ");
        exit(0);
    }
}